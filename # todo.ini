# 鞋子書買賣平台開發 To-Do List（使用 React + Node.js + MongoDB）

# 專案前置規劃階段

# 1. 系統規劃與需求整理
- [ ] 明確定義使用者角色（一般用戶、管理員）
- [ ] 列出系統目標與核心功能清單
- [ ] 規劃網站主要頁面（首頁、商品詳情、上架、登入等）
- [ ] 決定 UI/UX 設計風格與流程

# 2. 技術選型與開發策略
- [x] 前端選擇 React（使用 React Router + Axios）
- [x] 後端選擇 Node.js + Express
- [x] 資料庫選擇 MongoDB + Mongoose
- [ ] 部署平台決定（如 Vercel + Render + MongoDB Atlas）
- [ ] 安全機制規劃（JWT 認證、bcrypt 加密、CORS、防注入）

---

# 前端開發 To-Do（React）

# 環境設置
- [ ] 初始化 React 專案（使用 Vite 或 CRA）
- [ ] 安裝 React Router, Axios, 狀態管理工具（如 Redux 或 Zustand）

# 頁面與元件開發
- [ ] 首頁（商品預覽、分類篩選）
- [ ] 商品列表頁（篩選、排序）
- [ ] 商品詳情頁（留言、收藏、購買）
- [ ] 登入 / 註冊頁（JWT 認證連動）
- [ ] 上傳商品頁（圖片與表單）
- [ ] 我的商品管理頁（編輯/刪除）
- [ ] 我的收藏頁
- [ ] 訂單紀錄頁
- [ ] 管理後台頁（若有）

# API 整合
- [ ] 建立 Axios 基本設定（含 token 攜帶）
- [ ] 建立 API 模組（products、users、orders...）

---

# 後端開發 To-Do（Node.js + Express）

# 環境設置
- [ ] 初始化 Node.js 專案（npm init）
- [ ] 安裝 Express、Mongoose、Multer、JWT、bcrypt、dotenv 等
- [ ] 設定 `.env` 檔案與連線 MongoDB Atlas

# API 開發與模組化
- [ ] 使用者註冊 / 登入（JWT 驗證）
- [ ] 商品 CRUD API
- [ ] 收藏功能 API
- [ ] 留言功能 API
- [ ] 訂單建立與查詢 API
- [ ] 上傳圖片 API（Cloudinary 或 Multer）
- [ ] Middleware：驗證用戶、錯誤處理、安全過濾

---

# 資料庫設計 To-Do（MongoDB + Mongoose）

- [ ] 設計並撰寫 Mongoose Schema：
  - [ ] User Schema
  - [ ] Product Schema
  - [ ] Comment Schema
  - [ ] Favorite Schema
  - [ ] Order Schema
- [ ] 設定 Schema 關聯（`ref`）
- [ ] 初步建立種子資料（Seed Data）

---

# 部署與測試 To-Do

- [ ] 前端部署至 Vercel
- [ ] 後端部署至 Render / Railway
- [ ] MongoDB 部署至 MongoDB Atlas
- [ ] 測試 API（Postman）
- [ ] 實際驗證登入、上架、收藏、留言功能流程

---

# 加值與進階功能（可選）

- [ ] 加入商品評價與星等
- [ ] 加入聊天室功能（可用 Socket.io）
- [ ] 建立通知系統（商品被留言、交易成功）
- [ ] RWD 響應式設計調整
- [ ] 加入管理員後台功能（帳號黑名單、商品審核）
