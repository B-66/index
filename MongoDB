1. 安裝套件

```bash
pip install fastapi motor uvicorn pydantic python-dotenv
```

---

2. 資料結構與專案架構範例

```
shoe_store/
│
├── main.py
├── models/
│   └── product.py
│   └── user.py
│   └── order.py
├── routes/
│   └── product_route.py
│   └── user_route.py
│   └── order_route.py
├── db/
│   └── mongo.py
├── .env
```

---

3. MongoDB 連線設定

 `.env`

```env
MONGO_URI=mongodb://localhost:27017
DB_NAME=shoe_store
```

`db/mongo.py`

```python
import motor.motor_asyncio
import os
from dotenv import load_dotenv

load_dotenv()

MONGO_URI = os.getenv("MONGO_URI")
DB_NAME = os.getenv("DB_NAME")

client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)
database = client[DB_NAME]

product_collection = database.get_collection("products")
user_collection = database.get_collection("users")
order_collection = database.get_collection("orders")
```

---

 4. 定義 Product 模型與 CRUD（Pydantic + Motor）

`models/product.py`

```python
from pydantic import BaseModel, Field
from typing import List, Optional
from bson import ObjectId

class ProductModel(BaseModel):
    name: str
    brand: str
    category: str
    size: List[int]
    price: float
    stock: int
    description: Optional[str] = ""
    image: Optional[str] = ""

class ProductDB(ProductModel):
    id: str = Field(default_factory=str, alias="_id")
```

---

5. 建立 FastAPI 路由範例

`routes/product_route.py`

```python
from fastapi import APIRouter, HTTPException
from models.product import ProductModel, ProductDB
from db.mongo import product_collection
from bson import ObjectId

router = APIRouter()

# 新增鞋子
@router.post("/products")
async def create_product(product: ProductModel):
    new_product = await product_collection.insert_one(product.dict())
    created = await product_collection.find_one({"_id": new_product.inserted_id})
    created["_id"] = str(created["_id"])
    return created

# 取得所有鞋子
@router.get("/products")
async def list_products():
    products = []
    async for prod in product_collection.find():
        prod["_id"] = str(prod["_id"])
        products.append(prod)
    return products

# 取得單一商品
@router.get("/products/{product_id}")
async def get_product(product_id: str):
    product = await product_collection.find_one({"_id": ObjectId(product_id)})
    if not product:
        raise HTTPException(status_code=404, detail="商品未找到")
    product["_id"] = str(product["_id"])
    return product
```

---

6. 主程式 `main.py`

```python
from fastapi import FastAPI
from routes import product_route

app = FastAPI(title="鞋子購買平台")

app.include_router(product_route.router, prefix="/api")
```

---

7. 啟動伺服器

```bash
uvicorn main:app --reload
```

打開瀏覽器進入 `http://127.0.0.1:8000/docs` 即可看到 API 文件（Swagger UI）。
